// variables
// data types
	// 1. Simple types - string, int, float, etc
	// 2. Complex datatypes - list, set, maps (dictionaries)
		// -> sub complex types.


// VARIABLES - data store/capture until we dont require it.

fun main() {
    
    println("Hello, my name is Sunny")  // \n
    //print("Hello, my name is Sunny Yadav")  // no \n
    //print("Hello, my name is Sunny")
    
    
    // python - first_name - snake case convention
    // kotlin - firstName, addressStreetZipcodeApartment - camelCase convention
    
    
    // keyword variableName : DataType = value
    val firstName : String = "Sunny"
    val lastName : String = "Yadav"
    // declare a value - val (immutable variable - cannot change the value after assignment)
    
    println(firstName)
    println(lastName)
    
    // JAVA
    // string + string = string+string
    // int+int = int_value
    // string+int = string+int
    
	// VAR KEYWORD - Mutable type variable, whose value can be changed.
    var companyName : String = "Royal"
    
    // string concatenation
    println("Hello, my name is " + firstName + " " + lastName + " works at " + companyName)
    
    
    companyName = "UnEmployed"
    // Kotlin specific method
    println("Again, hello from $firstName $lastName works at $companyName")
    
    
    //BENEFITS
    //1. Develop 2011, Jetbrains
	//    2. 2016, Google as an official language android development.
 	//   3. logical code - diff file, xml - display, configuration
  	//  4. XML, JETPACK COMPOSE - library support, material themes, functions.
  	//  5. Logic and UI will be displayed directly.
  	//  6. Kotlin - conscise and fewer lines of code, less heavy app, use less memory, less crash chances, stable, robust application
   	// 7. Jetpack Compose is not fully developed.

    
    
    
    //1. Declare a mutable type variable of datatype Stirng.
    //2. Declare a immutable type variable of datatype Stirng.
//    3. Print both the variables on separate lines.
  //  4. Assign a new value to the mutable variable.
   // 5. Re print the value of the mutable variable.
    
    
    
    // DATATYPES
    
    // 1. INTEGERS
    // Syntax - var myAge : Int = 24
    
    // SUB DATA TYPES.
    	// 1. BYTE (8 bits) = 2^8 = 256
    	// 		a. Min = -128, 0
    	// 		b. Max = +127
    	// 		c. var myAge : Byte = 100
    	// 
        // 2. Short (16 bits) = 2^16 = calculate
        // 		a. Min = -32768, 0
        // 		b. Max = 32767
        // 		c. var myAge : Short = 7000
        // 
        // 3. Int (DEFAULT) (32 bits) - 2^32 = 
        // 		a. Min = -2^31, 0
        // 		b. Max = 2^31 - 1
        // 		c. var myAge : Int = 24
        // 
        // 4. Long (64 bits) - 2^64
       	//  	a. Min = -2^63
    	//		b. Max = 2^63 - 1
    
    // TYPE INFERENCE
    
    var phoneNumber = "99293912312"
    
  	println(phoneNumber)
    
    // 1. val myNumber = 100000 - INT
    // 2. val myNumber = 0 - Byte
    // --> val myNumber = -1 - Byte
    // 3. val myNumber = -100 - Byte
    // 4. val myNumber = 1000 - Short
    // 5. val myNumber = 10000000000 - Long
    
    
    // 2. NUMERICAL VALUES / DECIMAL NUMBERS
    // a. FLOAT (32 bits)
    // 		-> Precision (6-7 digits) - 1.923435464657 = 1.9234255
    // 		-> var floatNumber : Float = 1.923435464657f --> FLOAT
    // 		-> var floatNumber = 1.923435464657f  ---> FLOAT
    // 		-> var floatNumber = 1.923435464657  --> DOUBLE
    
    // b. Double (64 bits)
    // 		-> Precision (15-17 digits) - 1.9234354646571562345890 - 1.92343546465715623
    // 		-> var floatNumber : Double = 1.923435464657
    // 		-> var floatNumber = 1.923435464657
    	
    
    var floatNumber = 1.923435464657f
    var doubleNumber = 1.879796734673489674564
    println(floatNumber)
    println(doubleNumber)
    
    
    
    
    // BOOLEANS
    // a. True
    // b. False
    // var myBoolean : Boolean = true
    // var myBoolean = true/false
    
    
    
    // OPERATORS
    // 1. LOGICAL OR OPERATOR (||) - ONLY 1 STATEMENT NEEDS TO BE CORRECT OR TRUE.
    // a || b || c -> True, if either a,b or c is true, else if all false, then output is false
    // 2. LOGICAL AND OPERATOR (&&) - ALL THE STATEMENTS NEED TO BE TRUE FOR THE OVERALL CONDITION TO BE TRUE
    // a && b && c -> True, a and b and c are all true/false, else always false
    // 3. LOGICAL NOT OPERATOR (!) - REVERSE THE STATEMENT STORED IN THE VARIABLE OR THE VALUE.
    // a - true, !a - false and vice versa
    
    
    var myTrue = true
    var myFalse = false
    
    println(myTrue || myFalse)  // true
    println(myTrue || myTrue)  // true
    println(myFalse || myFalse) // false
    println(myTrue && myFalse) // false
    println(myTrue && myTrue) // true
    println(myFalse && myFalse) // false
    println(!myTrue) // false
    println(!myFalse) // true
    println(!(myTrue || myTrue)) // false
    println(!(myTrue && myFalse)) // true

    
    
    
    // CHARACTER
    // Only accepts single letter, and that too in single quotes
    // 'c', 'g'
    // var myVariable : Char = 'a'
    // var myVariable = 'a'
    
    
    // STRING
    // Can accepts multiple letters and in double quotes
    // "Royal Tech"
    // var myString : String = "Royal"
    // var myString = "Royal"
    
    
    
    
    // UNSIGNED INTEGERS
    // SUB CATEGORY OF INTEGERS (WE WILL INCLUDE ONLY POSITIVE VALUES)
    
    // UByte (Unsigned bytes) - 8 bits - 2 ^ 8 = 256
    // Range = 0, 255
    // var myVariable : UByte = 100
    // 
    // UShort (Unsigned Short) - 16 bits - 2 ^ 16 = 65535
	// Range = 0, 65534
    // var myVariable : UShort = 10000
    
    // UInt (Unsigned Integers) - 32 bits - 2 ^ 32
    // Range = 0, 2^32 - 1
    // var myVariable : UInt = 1000000
    // 
    // ULong (Unsigned Long) - 64 bits - 2 ^ 64
    // Range = 0, 2^64 - 1
    // var myVariable : ULong = 10000000000
    
    
    
    
    
    // CONDITIONAL STATEMENTS (IF, ELSE, ELSE IF)
    
    
    
   
    // ARITHMETIC OPERATORS
    // 1. == (EQUALS TO) 
    // 2. > (GREATER THAN)
    // 3. < (LESS THAN)
    // 4. >= (GREATER THAN EQUAL TO)
    // 5. <= (LESS THAN EQUAL TO)
    
    // = (ASSIGNMENT OPERATOR)/ == (ARITHMETIC OPERATOR)
    
    
    
    
    var myAge = 20
    // can we go into a bar? 18> - yes, else no
    
    
    if (myAge > 18) {
        println("Yes")
    } else {
        println("No")
    }
    
    
    // 1. age = 18,
    // age > 18 - bar enter, yes you can enter.
    // age > 40 - too old,
    // age < 18 - no, cannot enter
    
    
    
    // USER INPUT
    
    //input("Please enter value: ") - string
    
   // println("Please enter value: ")
    //readln() - string - Int, Float, Double
    
   	// ReadLn() will give out error in kotlin playground, test the code in Android Studio.
    
    
    //var myName = readln()- sunny, 1, 0.5, c - string
    //println(myName)
   
   	
   	//var myAge = input().toInt()
    
  //  var myAge = input()
    //var intMyAge = myAge.toDouble()
   
   	
   
   	// 1. Create a print statement to prompt the user for a value of his age
    // 2. store the value in a variable called inputString of datatype string.
    // 3. Convert the value into INT datatype and store it into another variable called intInputString.
    // 4. Create a new variable called multiplier and set its value to 10.
    // 5. Perform multiplication with the variables - multiplier and intInputString.
    // 6. Print the output of the multiplication.
   
   
   // RANGE FUNCTION
   
   	// 1,2,3,4,5,.....100
    
    
    var myRange = 1..100
//    var myCheckNumber = 1
    
    println(myRange)
    
    if (myRange.contains(18)) {
        println("True exist")
    } else {
        println("False not exist")
    }
    
    
    
    // ALTERNATIVE OF READLN() FUNCTION
    
    import java.util.Scanner
    
    var reader = Scanner(System.`in`)
    
    print("Enter value")
    
    // String value
    var myName : String = reader.next()
    
    // Int value
    var myAge : Int = reader.nextInt()
    
    
    println("$myName and $myAge")




// WHEN STATEMENT
    
    // if - else
    // switch case - C
    // match case - Python 3.10
    // when case syntax
    // when (condition) {}
    
    
    // WHEN as a STATEMENT
    // Use when as a statement when the piece of code needs to be executed without storing the result for future use.
    
    var var1 = 2
    var var2 = 0
    
    when (var1) { // when (1)
        
        //case 1: 
        	//print("hi")
        //case 2:
        	//println("bye")
        //default:
        
        1 -> var2 = 100
        2 -> var2 = 200
        // default case
        else -> println("No successful case")
    }
    
    println(var2)
    

    // WHEN as an EXPRESSION    
    // Use when as a expression when the piece of code needs to be executed with storing the result for future use.

    var monthOfYear = -9 // May
    
    // 1 - Jan, 10 - Oct, 8 - Aug
    
    var month = when (monthOfYear) {
        1 -> "Jan"
        2 -> "Feb"
        3 -> "Mar"
        4 -> "Apr"
        5 -> "May"
        6 -> "June"
        7 -> "July"
        8 -> "Aug"
        9 -> "Sep"
        10 -> "Oct"
        11 -> "Nov"
        12 -> "Dec"
        // default case
        else -> "No month name present"
    }
    
    
    println("my month name is ${month}")
    
    
    // Use when case to check for a value between range
    // var = int_value (1-100)
    // 1-20 - lower
    // 21-50 - middle
    // 51-100 - higher
    // else - out of bound
    
    var num = 15
	when (num) {
       in 1..20 -> print("Lower")
       in 21..50 -> print("middle")
       in 51..100 -> print("higher")
       else -> print("Out of bound")
    }
     
 
 
 	// WHILE LOOP
    
    // var initialize
    // var check condition
    // var value increment/decrement
    // syntax - while () {}
    // break - to breakout of the loop without running further code.
    
    println()
    var counter = 0
 
 	while (counter < 10) {
        println(counter)
        
        if (counter == 5) {
            println("Condition true")
            break
        }
        
        //counter++ // only increment value will be 1
        counter = counter + 1 // incrment value can be anything
		//counter += 5
    }

    
}
