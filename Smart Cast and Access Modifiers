// KOTLIN NULL and NON NULLABLE Types

// KOTLIN NULL SAFETY CHECK
// 1. NULLABLE VALUES
// 2. NON NULLABLE VALUES



//1. NULLABLE DATATYPES - declared using "?" after the datatype
// var myValue : String? = "Hello"
// fun main () {
//     var myValue : String? = "Hello"
//     println("My value is : $myValue")
    
//     myValue = null
//     println("Updated value is : $myValue")
// }


// 2. NON NULLABLE DATATYPE - declared without using "?" after the datatype
// var myValue : String = "Hello"
// fun main () {
//     var myValue : String = "Hello"
//     println("My value is : $myValue")
    
//     // will give out error if "?" not used
//     myValue = null
//     println("Updated value is : $myValue")
// }


// SMART CAST (CHECK FOR NULLABILITY)
// TO USE SMART CAST WE NEED TO CHECK IT IN THE IF ELSE EXPRESSION

// fun main() {
    
//    	var myValue : String? = "Hello"
//     println("My value is : $myValue")

// 	if (myValue != null) {
//         println("My length of the var is : ${myValue.length}")
//     }  else {
//         println(-1)
//     }
    
//     myValue = null
//     println("Updated value is : $myValue")
    
//     if (myValue != null) {
//         println("My length of the var is : ${myValue.length}")
//     }  else {
//         println(-1)
//     }
// }



// ACCESS MODIFIERS
// 1. PUBLIC  (default) - public - by defalt it can be accessed anywhere from the project
// 2. PROTECTED - protected - declared inside class and can be access within the subclass as well but cannot be access from the objects or another module
// 3. PRIVATE - private - declared inside class and can be used only in that class, cannot be accessed in child class, or objects or from another module.
// 4. INTERNAL - internal - declared inside class and can be accessed with in the subclass and from another module as well.


// public
// public var myValue = 10

// private
// private var myValue = 100

// protected
// protected var myValue = 1000

// internal
// internal var myValue = 10000


// TOP LEVEL DECLARATION

// public - can be accessed from anywhere inside the project
public var publicValue = 100  // public is by default

// private - can be accessed from only this file 
// For Example - private declaration is done in file1.kt, then this var cannot be accessed in file2.kt
private var privateValue = 101

// internal - can be accessed in this file as well as other files in the same module
// For Example - internal declaration done in Mod1File1.kt, can be accessed in Mod1File2.kt, cannot be accessed from Mod2File1.kt
internal var internalValue = 202

// protected - TOP DECLARATION IS NOT SUPPORTED


// class defined - final type class is created and cannot be changed once defined
// open keyword to change to values in the child class
open class BaseClass {
    
    var myValue = 1  // public
    
    private var myValue2 = 2
    
    protected var myValue3 = 3
    
    internal open var myValue4 = 4
}


class ChildClass : BaseClass() {
//     myValue, myValue3, myValue4 can be used or are visible
    // myValue2 cannot be used as it is private
    
    override var myValue4 = 100
   
}


fun main () {
    
    var baseObj = BaseClass()
//     println(baseObj.myValue)
//     println(baseObj.myValue2)
//     println(baseObj.myValue3)
    println(baseObj.myValue4)
        
    var childObj = ChildClass()
    println(childObj.myValue4)
    
    
    println("Public Value : $publicValue")
    println("Private Value : $privateValue")
    println("Internal Value : $internalValue")
    
    
    
}
