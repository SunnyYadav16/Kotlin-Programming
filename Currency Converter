package com.example.currencyconverter

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material3.Button
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.currencyconverter.ui.theme.CurrencyConverterTheme
import kotlin.math.log


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            CurrencyConverterTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    CurrencyConverter(modifier = Modifier.padding(innerPadding))
                }
            }
        }
    }
}


@Composable
fun CurrencyConverter(modifier: Modifier = Modifier) {

    var inputData by remember{ mutableStateOf("") }

    var inputUnit by remember {
        mutableStateOf("INR")
    }

    var outputValue by remember {
        mutableStateOf("")
    }

    var outputUnit by remember {
        mutableStateOf("INR")
    }

    var iExpanded by remember {
        mutableStateOf(false)
    }

    var oExpanded by remember {
        mutableStateOf(false)
    }

    var iConversionFactor by remember {
        mutableStateOf(1.0)
    }

    var oConversionFactor by remember {
        mutableStateOf(1.0)
    }


    // 1. Scope and visibility only restricted to this CurrencyConverter
    // 2. We can directly access the state or normal variables directly into this inner function
    fun calculateValue() {

        // elvis operator - true ?: return
        var inputValueDouble = inputData.toDoubleOrNull() ?: 0.0
        Log.d("Type", "$inputValueDouble")

        var result = (inputValueDouble * oConversionFactor / iConversionFactor)
        outputValue = result.toString()
    }


    Column(
        modifier = modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Stack the data or elements on top of each other

        Text(text = "Currency Converter", modifier = modifier)

        Spacer(modifier = Modifier.height(16.dp))
        
        OutlinedTextField(
            value = inputData,
            onValueChange = {
                inputData = it
            },
            placeholder = { Text(text = "Enter value")}
        )

        Spacer(modifier = Modifier.height(16.dp))

        Row {
            // Stack the data after one another

            // INPUT BOX
            Box { // layout element to structure the elements
                // INPUT BUTTON
                Button(onClick = {
                    iExpanded = true
                }) {
                    Text(text = inputUnit)
                    Icon(
                        Icons.Default.KeyboardArrowDown,
                        contentDescription = "Button 1 Arrow Down"
                    )
                }

                DropdownMenu(expanded = iExpanded, onDismissRequest = { iExpanded = false })
                {
                    DropdownMenuItem(
                        text = { Text(text = "INR") },
                        onClick = {
                            // Select the value and put it into a new variable
                            // drop down should close when clicked on an element
                            inputUnit = "INR"
                            iExpanded = false
                            iConversionFactor = 1.0
                            calculateValue()
                            Log.d("INPUT UNIT", "UNIT IS $inputUnit")
                        }
                    )

                    DropdownMenuItem(
                        text = { Text(text = "USD") },
                        onClick = {
                            inputUnit = "USD"
                            iExpanded = false
                            iConversionFactor = 0.0119
                            calculateValue()
                            Log.d("INPUT UNIT", "UNIT IS $inputUnit")
                        }
                    )

                    DropdownMenuItem(
                        text = { Text(text = "GBP") },
                        onClick = {
                            inputUnit = "GBP"
                            iExpanded = false
                            iConversionFactor = 0.0093
                            calculateValue()
                            Log.d("INPUT UNIT", "UNIT IS $inputUnit")

                        }
                    )

                    DropdownMenuItem(
                        text = { Text(text = "JPY") },
                        onClick = {
                            inputUnit = "JPY"
                            iExpanded = false
                            iConversionFactor = 1.7589
                            calculateValue()
                            Log.d("INPUT UNIT", "UNIT IS $inputUnit")

                        }
                    )
                }
            }

            Spacer(modifier = Modifier.width(16.dp))

            // OUTPUT BOX
            Box {
                // OUTPUT BUTTON
                Button(onClick = {
                    oExpanded = true
                }) {
                    Text(text =  outputUnit)
                    Icon(
                        Icons.Default.KeyboardArrowDown,
                        contentDescription = "Button 1 Arrow Down"
                    )
                }

                DropdownMenu(expanded = oExpanded, onDismissRequest = { oExpanded = false })
                {
                    DropdownMenuItem(
                        text = { Text(text = "INR") },
                        onClick = {
                            outputUnit = "INR"
                            oExpanded = false
                            oConversionFactor = 1.0
                            Log.d("OUTPUT UNIT", "UNIT IS $outputUnit")
                        }
                    )

                    DropdownMenuItem(
                        text = { Text(text = "USD") },
                        onClick = {
                            outputUnit = "USD"
                            oExpanded = false
                            oConversionFactor = 0.0119
                            Log.d("OUTPUT UNIT", "UNIT IS $outputUnit")
                        }
                    )

                    DropdownMenuItem(
                        text = { Text(text = "GBP") },
                        onClick = {
                            outputUnit = "GBP"
                            oExpanded = false
                            oConversionFactor = 0.0093
                            Log.d("OUTPUT UNIT", "UNIT IS $outputUnit")
                        }
                    )

                    DropdownMenuItem(
                        text = { Text(text = "JPY") },
                        onClick = {
                            outputUnit = "JPY"
                            oExpanded = false
                            oConversionFactor = 1.7589
                            Log.d("OUTPUT UNIT", "UNIT IS $outputUnit")
                        }
                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))
        Text(text = "Result : $outputValue")

    }
}


@Preview(showBackground = true)
@Composable
fun  CurrencyConverterPreview() {
    CurrencyConverter()
}

