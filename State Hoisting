package com.example.statecounter

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.example.statecounter.ui.theme.StateCounterTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            StateCounterTheme {

                // STATEFUL COMPOSABLE
                // STATE HOISTING
                // FIND A COMMON LOCATION FOR THE STATE VARIABLE AND THEN PASS IT ONTO DIFF FUNCTIONS
                var counter =  rememberSaveable {
                    mutableStateOf(0)
                }

                // by keyword
                var count by rememberSaveable {
                    mutableStateOf(0)
                }
                println(count)

                NotificationCounter(counter.value, { counter.value++ })
                MessageBar(counter.value)
            }
        }
    }
}


// THOSE FUNCTIONS WHICH DOES NOT CONTAIN OR CREATE A STATE VARIABLE - STATELESS COMPOSABLE
// THOSE FUNCTIONS WHICH DOES HAVE OR CREATE A STATE VARIABLE - STATEFUL COMPOSABLE


// UNI DIRECTIONAL FLOW
// WHEN THE FLOW GOES FROM PARENT TO CHILD, THEN IT IS CALLED UNIDIRECTIONAL FLOW.
// EX - SET CONTENT IS THE MAIN PARENT FUNCTION, AND NOTIFICATION COUNTER AND MESSAGE BAR ARE THE CHILD FUNCTION

// THE DATA ALWAYS FLOW FROM THE PARENT TO THE CHILD FUNCTION
// THE EVENTS WILL ALWAYS FLOW FROM THE CHILD TO THE PARENT FUNCTION

// PARENT TO CHILD -> DATA WILL FLOW
// CHILD TO PARENT -> EVENT WILL FLOW/OCCUR


// STATELESS COMPOSABLE
@Composable
fun MessageBar(countValue : Int) {
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(100.dp))
        Row {
            Text(text = "Messages sent so far - ${countValue}")
        }
    }
}

@Composable
fun NotificationCounter(counter : Int, increment: () -> Unit) {

    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        // recompose
        Text(text = "You have successfully sent ${counter} notifications")

        Button(onClick = {
            increment()
            // LOGGING
            Log.d("Button Pressed", "Button is clicked and value is ${counter}")

        }) {
            Text(text = "Send notification")
        }
    }
}


// STATE HOISTING


// LOGGING METHODS

// LOG.d(tag, mssg) - for debug purposes
// LOG.e(tag, mssg) - for error purposes
// LOG.i(tag, mssg) - for informational purposes
// LOG.wtf(tag, mssg) - to display critical errors (What a terrible failure)


